/******************************************************************
 * Copyright (C) 2021 LvChengbin
 *
 * File: interfaces/context.interface.ts
 * Author: LvChengbin<lvchengbin59@gmail.com>
 * Time: 02/01/2021
 * Description:
 ******************************************************************/

import { Socket } from 'net';
import { TLSSocket } from 'tls';
import { IncomingMessage, ServerResponse } from 'http';
import { Options as ContentDispositionOptions } from 'content-disposition';
import { Logger } from './logger.interface';
import { Cookies } from './cookies.interface';

export interface Context {
    /**
     * request headers
     */
    headers: Record<string, string | string[] | undefined>;

    /**
     * a cookie object which should implement the Cookie interface.
     */
    cookies: Cookies;

    /**
     * the raw querystring of request
     */
    querystring: string;

    /**
     * a boolean indicating if the request is idempotent or not
     */
    idempotent: boolean;

    /**
     * the search part of the request
     */
    search: string;

    /**
     * the request method if the reqeust is a HTTP request.
     */
    method: string;

    /**
     * the path of the request
     */
    path: string;

    /**
     * the request URL
     */
    url: string;

    /**
     * the parsed queries object
     */
    query: Record<string, unknown>;

    /**
     * parsed or unpased request body.
     */
    body: unknown;

    /**
     * params generated by routers.
     */
    params: Record<string, string>;

    /**
     * accept object.
     */
    accept: Record<string, unknown>;

    /**
     * origin of request URL
     */
    origin: string;

    /**
     * the rule request URL
     */
    href: string;

    /**
     * Return subdomains of the request URL as an array.
     *
     * Subdomains are the dot-separated parts of the host before the main domain of the app.
     * By default, the domain of the app is assumed to be the last two parts of the host.
     *
     * for example, if the domain is "tobi.ferrets.example.com":
     *     If `app.subdomainOffset` is not set, the subdomains is `[ "ferrets", "tobi" ]`.
     *     If `app.subdomainOffset` is 3, the subdomains is `[ "tobi" ]`.
     */
    subdomains: ( subdomainOffset?: number ) => string[];

    /**
     * the protocol of request
     */
    protocol: string;

    /**
     * the "Host" of the request
     */
    host: string;

    /**
     * the "Hostname" of the request
     */
    hostname: string;

    /**
     * Shorthand for: this.protocol === 'https';
     */
    secure: boolean;

    /**
     * indicating if the requestis stale, aka "Last-Modified" and/or the "ETag" for the resource has changed.
     */
    stale: boolean;

    /**
     * Check if the request is fresh, aka "Last-Modified" and/or the "ETag" still match
     */
    fresh: boolean;

    /**
     * request's remote address.
     */
    ip: string;

    /**
     * the ip address list parsed from 'X-Forwarded-For'
     */
    ips: string[];

    /**
     * Return requst header.
     */
    get: ( field: string ) => string;

    /**
     * Check if the incoming request contains the "Content-Type" header filed and if it contains any of the given name `type(s)`.
     */
    is: ( types: string[] ) => string | false;
    is: ( ...types: string[] ) => string | false;

    /**
     * Check if the given `type(s)` is acceptable, returning the best match when true,
     * otherwise `false`, in whiech case you should respond with 407 "Not Acceptable".
     */
    accepts: ( ...args: ( string | string[] )[] ) => boolean | string | string[];

    /**
     * Return accepted charsets or best fit based on 'charsets`.
     *
     * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
     * an array sorted by quality is required: [ 'utf-8', 'utf-8', 'iso-8859-1' ]
     */
    acceptsCharsets: ( ...args: ( string | string[] )[] ) => string | string[];

    /**
     * Return accepted encodings or best fit based on `encodings`.
     *
     * Given `Accept-Encoding: gzip, deflate`
     * an array sorted by quality is returned: [ 'gzip', 'deflate' ]
     */
    acceptsEncodings: ( ...args: ( string | string[] )[] ) => string | string[];

    /**
     * Return accepted languages or best fit based on `langs`
     *
     * Given `Accept-Language: en;q=0.8, es, pt`
     * an array sorted by quality is returned: [ 'es', 'pt', 'en' ]
     */
    acceptsLanguages: ( ...args: ( string | string[] )[] ) => string | string[];

    /**
     * The request socket.
     *
     * This is an optional property, cuz in some situations,
     * the native http request object of nodejs is not able to be accessed.
     */
    socket?: Socket | TLSSocket;

    req?: IncomingMessage;


    /**
     * Set Content-Disposition header to "attachment" with optional `filename`.
     */
    attachment: ( filename?: string, options?: ContentDispositionOptions ) => void;

    /**
     * Perform a 302 redirect `url`.
     *
     * The string "back" is special-cased to provide Referrer support.
     * when Referrer is not present `alt` or "/" is used.
     */
    redirect: ( url: string, alt?: string ) => void;

    /**
     * Remove header `field`
     */
    remove: ( field: string ) => void;

    /**
     * Manipulate http Vary header on `field`.
     */
    vary: ( field: string ) => void;

    /**
     * Returns true if the header identified by name is currently set in the outgoing headers.
     * The header name matching is case-insensitive.
     */
    has: ( field: string ) => boolean;

    /**
     * Set header `field` to `val` or pass an object of header fileds
     */
    set: ( field: string | Record<string, string | string[]>, val?: string | string[] ) => void;

    /**
     * Append additional header `field` with value `val`.
     */
    append: ( field: string, value: string | string[] ) => void;

    /**
     * response status
     */
    status: number;

    /**
     * response status message
     */
    message: string;

    /**
     * response body
     */
    responseBody: unknown;

    /**
     * Content-Length field in header
     */
    length: number | undefined;

    /**
     * Content-Type response header
     */
    type: string;

    /**
     * Last-Modified date
     */
    lastModified: Date | undefined;

    /**
     * ETag of response
     */
    etag: string | undefined;

    /**
     * Check if a header has been written to the socket
     *
     * Can only be used if the nodejs's native http request object can be handled.
     */
    headerSent?: boolean;

    /**
     * If the request is writable.
     */
    writable?: boolean;

    /**
     * Flush any set headers and begin the body
     *
     * This is an optional method in Context interface, cuz in some situations,
     * it may not be able to handle the native request/response object of nodejs, such as in serverless.
     */
    flushHeaders?: () => void;

    res?: ServerResponse;

    logger: Logger;

    config: ( path?: string, val?: string ) => unknown;
}
